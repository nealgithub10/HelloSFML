cmake_minimum_required(VERSION 3.14)
project(HelloSFML)

#message("Hello Neal")

option(CURL_STATIC_LINKING "Set to ON to build libcurl with static linking."  OFF)

#if(CURL_STATIC_LINKING)
    message("-DCURL_STATICLIB [added]")
    add_definitions(-DCURL_STATICLIB)
#endif()

add_definitions(-DJSON_USE_IMPLICIT_CONVERSIONS=0)



find_package(SFML 2.5 COMPONENTS system window graphics network audio REQUIRED)
find_package(nlohmann_json REQUIRED)
find_package(CURL REQUIRED)

add_executable(HelloSFML ${SOURCE_FILES})
include_directories(/usr/local/include)
include_directories(${CURL_INCLUDE_DIRS})
include_directories(${SFML_INCLUDE_DIRS})


message("Using compiler ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(SOURCE_FILES main.cpp
        TextBox.cpp
        Button.cpp
        TranscriptStealer.h
)

set_property(TARGET HelloSFML PROPERTY CXX_STANDARD 11)
set_property(TARGET HelloSFML PROPERTY CXX_STANDARD_REQUIRED ON)

target_compile_options(HelloSFML PRIVATE
        $<$<CXX_COMPILER_ID:MSVC>:/W4>
        $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -pedantic>
)

target_include_directories(HelloSFML PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(HelloSFML PRIVATE ${CURL_INCLUDE_DIRS})
target_link_libraries(HelloSFML PRIVATE nlohmann_json::nlohmann_json ${CURL_LIBRARIES})

target_link_libraries(HelloSFML PRIVATE sfml-system sfml-window sfml-graphics sfml-audio sfml-network ${CURL_LIBRARIES})

#find_package(CURL REQUIRED)
#target_include_directories(HelloSFML PRIVATE ${CURL_INCLUDE_DIRS})
#target_link_libraries(HelloSFML PRIVATE ${CURL_LIBRARIES})
